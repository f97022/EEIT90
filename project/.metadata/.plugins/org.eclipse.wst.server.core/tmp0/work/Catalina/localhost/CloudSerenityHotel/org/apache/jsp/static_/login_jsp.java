/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.31
 * Generated at: 2024-11-24 14:30:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.static_;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"zh-tw\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\" />\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("	<title>雲澄旅館-登入會員</title>\r\n");
      out.write("	<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\r\n");
      out.write("		integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\" />\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css\">\r\n");
      out.write("	<style>\r\n");
      out.write("		.login {\r\n");
      out.write("			margin: auto;\r\n");
      out.write("			padding: 50px 0;\r\n");
      out.write("			display: flex;\r\n");
      out.write("			justify-content: center;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		.loginform {\r\n");
      out.write("			padding: 35px 35px;\r\n");
      out.write("			width: 400px;\r\n");
      out.write("			display: block;\r\n");
      out.write("			border-radius: 50px;\r\n");
      out.write("			background-color: skyblue;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		.nav-bgc {\r\n");
      out.write("			background-color: lightblue;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		#errorMessage {\r\n");
      out.write("			padding: 10px 0;\r\n");
      out.write("			margin: 0;\r\n");
      out.write("			color: #c70000;\r\n");
      out.write("			font-weight: bold;\r\n");
      out.write("			visibility: hidden;\r\n");
      out.write("			text-align: center;\r\n");
      out.write("		}\r\n");
      out.write("	</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<nav class=\"navbar navbar-light nav-bgc\">\r\n");
      out.write("		<div class=\"container-fluid\">\r\n");
      out.write("			<a class=\"navbar-brand\" href=\"#\">雲澄旅館</a>\r\n");
      out.write("		</div>\r\n");
      out.write("	</nav>\r\n");
      out.write("	<div class=\"login container\">\r\n");
      out.write("		<form class=\"loginform\" method=\"post\" action=\"../user/login\">\r\n");
      out.write("			<h2 style='text-align: center; margin: 0;'>歡迎登入</h2>\r\n");
      out.write("			<br>\r\n");
      out.write("			<label for=\"email\" class=\"form-label fs-5\">電子信箱</label>\r\n");
      out.write("			<input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"請輸入電子信箱\" required />\r\n");
      out.write("			<br>\r\n");
      out.write("			<label for=\"password\" class=\"form-label fs-5\">密碼</label>\r\n");
      out.write("			<input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"請輸入密碼\" minlength=\"8\"\r\n");
      out.write("				maxlength=\"64\" required />\r\n");
      out.write("			<br>\r\n");
      out.write("			<div class=\"d-grid gap-2 mx-auto\">\r\n");
      out.write("				<button type=\"submit\" class=\"btn btn-primary\">登入</button>\r\n");
      out.write("			</div>\r\n");
      out.write("			<p id=\"errorMessage\">\r\n");
      out.write("				<i class=\"fa-solid fa-circle-xmark\"></i>\r\n");
      out.write("				");

				String errorMessage = (String) request.getAttribute("errorMessage");
				if (errorMessage != null) {
					out.print(errorMessage);
				}
				
      out.write("\r\n");
      out.write("			</p>\r\n");
      out.write("			<p style='text-align: center; margin: 0;'>\r\n");
      out.write("				沒有帳號? <a href=\"register.html\">立即註冊</a>\r\n");
      out.write("			</p>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"\r\n");
      out.write("		integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\">\r\n");
      out.write("\r\n");
      out.write("	</script>\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.7.1.js\" integrity=\"sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=\"\r\n");
      out.write("		crossorigin=\"anonymous\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("		$(document).ready(function () {\r\n");
      out.write("			showErrorMsg(); // 在頁面加載時執行\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		function showErrorMsg() {\r\n");
      out.write("			let msg = $('#errorMessage').text().trim(); // 取得錯誤訊息\r\n");
      out.write("			if (msg.length > 0) { // 如果訊息不為空，顯示錯誤訊息\r\n");
      out.write("				$('#errorMessage').css('visibility', 'visible');\r\n");
      out.write("			} else { // 如果沒有訊息，隱藏錯誤訊息\r\n");
      out.write("				$('#errorMessage').css('visibility', 'hidden');\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
